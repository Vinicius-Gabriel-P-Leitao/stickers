apply plugin: 'com.android.application'

android {
    compileSdkVersion 35

    defaultConfig {
        applicationId "br.arch.sticker"
        minSdkVersion 24
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def contentProviderAuthority = applicationId + ".stickercontentprovider"
        manifestPlaceholders = [contentProviderAuthority: contentProviderAuthority]

        buildConfigField("String",
                "CONTENT_PROVIDER_AUTHORITY",
                "\"${contentProviderAuthority}\"")

        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    namespace 'br.arch.sticker'
    androidResources {
        noCompress 'webp'
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = "17"
        targetCompatibility = "17"
    }

    packagingOptions {
        jniLibs {
            excludes += ['lib/*/libnative-imagetranscoder.so', 'lib/*/libnative-filters.so']
        }
    }

    splits {
        abi {
            enable true
            reset()
            //noinspection ChromeOsAbiSupport
            include 'arm64-v8a', 'armeabi-v7a'
            universalApk true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }

    ndkVersion '27.0.12077973'
}

private void checkApplicationIdInDebug(def androidExtension) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ignoreApplicationIdCheck = properties.getProperty('ignoreApplicationIdCheck')
    if (ignoreApplicationIdCheck == null) {
        if (androidExtension.defaultConfig.applicationId == "com.example.samplestickerapp") {
            throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")
        }
    } else {
        println("application id check ignored")
    }
}


tasks.register('checkDebug') {
    doLast {
        def androidExtension = project.extensions.findByName("android")
        if (androidExtension != null && androidExtension.defaultConfig.applicationId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
        checkApplicationIdInDebug(androidExtension)
    }
}

tasks.register('checkRelease') {
    doLast {
        println("checkRelease")
        if (android.defaultConfig.applicationId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
    }
}

tasks.configureEach { task ->
    println(task.name)
    if (task.name.contains("assembleDebug")) {
        task.dependsOn checkDebug
    }
    if (task.name.contains("assembleRelease")) {
        task.dependsOn checkRelease
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.material:material:1.12.0'
    testImplementation 'junit:junit:4.13.2'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'com.google.android.exoplayer:exoplayer:2.19.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    def androidx_version = "1.7.1"
    implementation "androidx.media3:media3-ui:$androidx_version"
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation "androidx.media3:media3-common:$androidx_version"
    implementation "androidx.media3:media3-exoplayer:$androidx_version"
    def glide_version = "4.16.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.zjupure:webpdecoder:2.7.$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    def fresco_version = '3.6.0'
    implementation "com.facebook.fresco:fresco:$fresco_version"
    implementation "com.facebook.fresco:webpsupport:$fresco_version"
    implementation "com.facebook.fresco:animated-webp:$fresco_version"
    implementation "com.facebook.fresco:animated-base:$fresco_version"
    def sqlite_version = "2.5.0"
    implementation "androidx.sqlite:sqlite:$sqlite_version"
    implementation "androidx.sqlite:sqlite-framework:$sqlite_version"
}
